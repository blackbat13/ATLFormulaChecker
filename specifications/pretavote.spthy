theory PretaVote
begin

builtins: multiset, symmetric-encryption, asymmetric-encryption, hashing, signing, diffie-hellman


// ---------------- RULES ----------------

rule AsymmetricKeySetup:
    [
        Fr(~f)
    ]
  --[ AsymmetricKeySetup($A, pk(~f), ~f) ]->
    [
        !Sk($A, ~f),
        !Pk($A, pk(~f))
    ]

rule InitialSetup:
    [
    ]
  --[ InitialSetup($A) ]->
    [
        GenerateVotersRule($A),
        GenerateCandidatesRule($A),
        GenerateBallotsRule($A),
        GenerateCountersRule($A),
        !ElectionAuthority($E)
    ]

// To change the number of voters just change the output of this rule
rule GenerateVoters:
    [
        GenerateVotersRule(A)
    ]
  --[ GenerateVoters() ]->
    [
        // n - number of voters
        // for i in (1..n): append Voter($Vi)
        Voter($V1),
        Voter($V2),
        Voter($V3),
        Voter($V4)
    ]

rule GenerateCandidates:
    [
        GenerateCandidatesRule(A)
    ]
  --[ GenerateCandidates() ]->
    [
        !Candidate('C1'),
        !Candidate('C2'),
        !Candidate('C3')
    ]

rule GenerateCounters:
    [
        GenerateCountersRule(A)
    ]
  --[ GenerateCounters() ]->
    [
        Counter('C1', '0'),
        Counter('C2', '0'),
        Counter('C3', '0')
    ]

// --- BALLOT GENERATION ---

rule GenerateBallots:
    [
        GenerateBallotsRule(A)
    ]
  --[ GenerateBallots() ]->
    [
        Ballot($B1),
        Ballot($B2),
        Ballot($B3),
        Ballot($B4)
    ]

rule GenerateBallotWithOrder:
    [
        Ballot(B),
        !Candidate(C1),
        !Candidate(C2),
        !Candidate(C3)
    ]
  --[ GenerateBallotWithOrder(B, C1, C2, C3) ]->
    [
        BallotWithOrder(B, C1, C2, C3) // order should be random (tamarin will decide, which value assign to C1, C2, ...)
    ]

rule GenerateBallotOnion:
    let
        onion = aenc(<C1, C2, C3, ~d>, pkE)
    in
    [
        !ElectionAuthority(E),
        !Pk(E, pkE),
        Fr(~d),
        BallotWithOrder(B, C1, C2, C3)
    ]
  --[ GenerateBallotOnion(onion) ]->
    [
        BallotWithOrderAndOnion(B, C1, C2, C3, onion)
    ]

// --- VOTE CASTING ---

rule CastVoteForFirst:
    [
        Voter(V),
        BallotWithOrderAndOnion(B, C1, C2, C3, onion)
    ]
  --[ CastVote(V, '1', onion) ]->
    [
        Vote(V, '1', onion)
    ]

rule CastVoteForSecond:
    [
        Voter(V),
        BallotWithOrderAndOnion(B, C1, C2, C3, onion)
    ]
  --[ CastVote(V, '2', onion) ]->
    [
        Vote(V, '2', onion)
    ]

rule CastVoteForThird:
    [
        Voter(V),
        BallotWithOrderAndOnion(B, C1, C2, C3, onion)
    ]
  --[ CastVote(V, '3', onion) ]->
    [
        Vote(V, '3', onion)
    ]

// --- VOTE COUNTING ---

rule CountVoteForFirst:
    [
        !ElectionAuthority(E),
        !Sk(E, skE),
        Vote(V, '1', aenc(<C1, C2, C3, d>, pk(skE))),
        Counter(C1, x)
    ]
  --[ CountVote(C1) ]->
    [
        Counter(C1, x + '1')
    ]

rule CountVoteForSecond:
    [
        !ElectionAuthority(E),
        !Sk(E, skE),
        Vote(V, '2', aenc(<C1, C2, C3, d>, pk(skE))),
        Counter(C2, x)
    ]
  --[ CountVote(C2) ]->
    [
        Counter(C2, x + '1')
    ]

rule CountVoteForThird:
    [
        !ElectionAuthority(E),
        !Sk(E, skE),
        Vote(V, '3', aenc(<C1, C2, C3, d>, pk(skE))),
        Counter(C3, x)
    ]
  --[ CountVote(C3) ]->
    [
        Counter(C3, x + '1')
    ]


// ---------------- RESTRICTIONS ----------------

restriction RunInitialSetupOnce:
  "All A1 A2 #i1 #i2. InitialSetup(A1) @i1 & InitialSetup(A2) @i2 ==> #i1=#i2 & A1=A2"

restriction Unique:
  "All B C1 C2 C3 #i. GenerateBallotWithOrder(B, C1, C2, C3) @i ==> not(C1=C2 | C1=C3 | C2=C3)"

// ---------------- LEMMAS ----------------

lemma AllForC3:
  exists-trace
  " Ex #i1 #i2 #i3 #i4.
        CountVote('C3') @ #i1
      & CountVote('C3') @ #i2
      & CountVote('C3') @ #i3
      & CountVote('C3') @ #i4
  "

end